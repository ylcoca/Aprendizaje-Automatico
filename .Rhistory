path_csv <- 'Datasets/df.csv'
path_feather <- 'Datasets/df.feather'
path_rdata <- 'Datasets/df.RData'
path_rds <- 'Datasets/df.rds'
# Luego guardamos los objetos
write.csv(redWineDf, file = path_csv, row.names = F)
write_feather(redWineDf, path_feather)
#Instalar paquetes
paquetes = c('foreign', 'feather', 'data.table', 'microbenchmark', 'purrr', 'tidyr', 'XML', 'xml2', 'dplyr', 'jsonlite', 'rjson', 'httr', 'RJSONIO', 'stringi', 'here')
instalados <- paquetes %in% installed.packages()
if (length(paquetes[!instalados]) > 0) {
install.packages(paquetes[!instalados], repos = 'http://cran.us.r-project.org')
}
lapply(paquetes, require, character.only = TRUE)
# Instalar un paquete de github
ongithub <- c('xmltools')
extension <- c('dantonnoriega')
pack <- cbind(ongithub, extension,  paste0(extension, '/', ongithub))
oghinstalado <- pack[,1] %in% installed.packages()
if (length(ongithub[!oghinstalado]) > 0) {
devtools::install_github(pack[!oghinstalado, 3])
}
path_csv <- 'Datasets/df.csv'
path_feather <- 'Datasets/df.feather'
path_rdata <- 'Datasets/df.RData'
path_rds <- 'Datasets/df.rds'
# Luego guardamos los objetos
write.csv(redWineDf, file = path_csv, row.names = F)
write_feather(redWineDf, path_feather)
save(df, file = path_rdata)
saveRDS(df, path_rds)
files <- c('Datasets/df.csv', 'Datasets/df.feather', 'Datasets/df.RData', 'Datasets/df.rds')
info <- file.info(files)
info$size_mb <- info$size/(1024 * 1024)
print(subset(info, select = c("size_mb")))
benchmark <- microbenchmark(readCSV = utils::read.csv(path_csv),
readrCSV = readr::read_csv(path_csv, progress = F),
fread = data.table::fread(path_csv, showProgress = F),
loadRdata = base::load(path_rdata),
readRds = base::readRDS(path_rds),
readFeather = feather::read_feather(path_feather), times = 10)
print(benchmark, signif = 2)
```{r}
poblaciones_df <- data.frame(
pais = c('Argentina ', 'Argentina ', 'Uruguay ', 'Uruguay ','Argentina ', 'Argentina ', 'Uruguay ', 'Uruguay '),
Anio = c(1980,1980,1980,1980,1981,1981,1981,1981),
tipo = c('total', 'urbana', 'total', 'urbana'),
poblacion = c(27000000,23000000,3000000,200000,27000100,23000030,3000001,200000)
)
poblacion_ordenado <- tidyr::spread(data = poblaciones_df, key = tipo, value = poblacion)
poblacion_ordenado
id <- seq(1, 1000, 1)
id <- seq(1, 1000, 1)
class(id)
length(id)
class(id)
mode(id)
id
typeof(id)
dim(id)
length(id)
class(id)
typeof(id)
attr(id)
id2 <- seq(10, 100, 1)
id2
id2 <- seq(10, 100, 2)
id2
```{r}
```{r}
```{r}
vGenero <- seq(0, 2, 1)
vGenero
vGenero <- seq(1, 2, 1)
vGenero
vGenero <- seq(1, 2, 1)
print(vGenero)
x <- 1:12
sample(x)
sample(edad)
edad <- seq(18, 60, 1)
sample(edad)
sample(edad, 100, replace = TRUE)
vGenero <- seq(1, 2, 1)
sample(vGenero, 100, replace = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
install.packages("leaflet")
library(leaflet)
sp_df <- readOGR(dsn = "Datasets/cpost", layer = "mh_bim")
library(rgdal)
sp_df <- readOGR(dsn = "Datasets/cpost", layer = "mh_bim")
sp_df <- readOGR(dsn = "Dataset/cpost", layer = "mh_bim")
sp_df <- readOGR(dsn = "Dataset/cpost", layer = "mh_bim")
benchmark <- microbenchmark(readCSV = utils::read.csv(path_csv),
readrCSV = readr::read_csv(path_csv, progress = F),
fread = data.table::fread(path_csv, showProgress = F),
loadRdata = base::load(path_rdata),
readRds = base::readRDS(path_rds),
readFeather = feather::read_feather(path_feather), times = 10)
sp_df <- readOGR(dsn = "Dataset/cpost", layer = "mh_bim")
sp_df <- readOGR(dsn = "cpost", layer = "mh_bim")
sp_df <- readOGR(dsn = "./cpost", layer = "mh_bim")
sp_df <- readOGR(dsn = "cpost")
sp_df <- readOGR(dsn = "cpost")
print(sp_df)
typeof(sp_df);
length(sd_df);
length(sp_df);
plot(sp_df, col='blue', bg='yellow')
box()
for(i in 1:4) axis(i)
head(sp_df@data)
sapply(sp_df@data, class)
str(sp_df@data)
df <- as.data.frame(sp_df@data)
paquetes = c('foreign', 'feather', 'data.table', 'microbenchmark', 'purrr', 'tidyr', 'XML', 'xml2', 'dplyr', 'jsonlite', 'rjson', 'httr', 'RJSONIO', 'stringi', 'here')
instalados <- paquetes %in% installed.packages()
if (length(paquetes[!instalados]) > 0) {
install.packages(paquetes[!instalados], repos = 'http://cran.us.r-project.org')
}
lapply(paquetes, require, character.only = TRUE)
# Instalar un paquete de github
ongithub <- c('xmltools')
extension <- c('dantonnoriega')
pack <- cbind(ongithub, extension,  paste0(extension, '/', ongithub))
oghinstalado <- pack[,1] %in% installed.packages()
#if (length(ongithub[!oghinstalado]) > 0) {
#  devtools::install_github(pack[!oghinstalado, 3])
#}
lapply(ongithub, require, character.only = TRUE)
sp_df <- readOGR(dsn = "cpost")
print(sp_df)
caracter <- unique(sp_df, incomparables = FALSE)
caracter <- unique(sp_df$site_code, incomparables = FALSE)
caracter
v3 <- sample(sp_df$site_code, 1000, replace = TRUE)
v3 <- sample(sp_df$site_code, 1000, replace = TRUE)
v3
sp_df
caracter <- unique(sp_df$site_code, incomparables = FALSE, fromLast = FALSE,
nmax = 1)
caracter
caracter <- unique(sp_df$site_code, incomparables = FALSE, fromLast = FALSE)
caracter
caracter <- unique(sp_df$site_code, incomparables = FALSE, fromLast = FALSE,
nmax = 2)
caracter
head(sp_df@data)
length(unique(sp_df$cod_postal))
length(unique(sp_df$site_code))
head(sp_df@data)
paste("Today is", date())
paste("Hay ", date(), "sadfsfsdf")
length(unique(sp_df$cod_postal))
length(unique(sp_df$site_code))
paste("Hay ", length(unique(sp_df$cod_postal)) - length(unique(sp_df$site_code)), " que no tienen valor unico")
x <- c("abcd", "ABC")
i <- c(3, 1, 1, 2, 1)
## With a character vector:
letter(x[1], 3:1)
x <- c("abcd", "ABC")
i <- c(3, 1, 1, 2, 1)
## With a character vector:
#letter(x[1], 3:1)
letter(x, 3)
m <- letters[1:10]
m
m <- LETTERS[1:10]
m
v4 <- sample(tiendas, 1000, replace = TRUE)
tiendas <- LETTERS[1:10]
v4 <- sample(tiendas, 1000, replace = TRUE)
v4
clientes <- data.frame(matrix(ncol = 4, nrow = 1000))
x <- c("id", "sexo", "edad", "barrios")
colnames(clientes) <- x
clientes
clientes <- data.frame(matrix(ncol = 4, nrow = 1000))
x <- c("id", "sexo", "edad", "barrios")
colnames(clientes) <- x
str(clientes)
clientes <- data.frame(matrix(ncol = 4, nrow = 1000))
x <- c(id, "sexo", "edad", "barrios")
colnames(clientes) <- x
clientes <- data.frame(matrix(ncol = 4, nrow = 1000))
x <- c(id, "sexo", "edad", "barrios")
colnames(clientes) <- x
cash <- data.frame(company, cash_flow, year, stringsAsFactors = FALSE)
cash <- data.frame(clientes, stringsAsFactors = FALSE)
str(cash)
clientes <- data.frame(matrix(ncol = 4, nrow = 1000))
x <- c(id, "sexo", "edad", "barrios")
colnames(clientes) <- x
clientes <- data.frame(matrix(ncol = 4, nrow = 1000))
x <- c("id", "sexo", "edad", "barrios")
colnames(clientes) <- x
str(clientes)
clientes <- data.frame(matrix(ncol = 4, nrow = 1000 , stringsAsFactors = FALSE))
clientes <- data.frame(matrix(ncol = 4, nrow = 1000 ),stringsAsFactors = FALSE)
x <- c("id", "sexo", "edad", "barrios")
colnames(clientes) <- x
str(clientes)
clientes <- data.frame(Numbers = 1:3 , matrix(ncol = 4, nrow = 1000 ),stringsAsFactors = FALSE)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary)
str(poblaciones_df)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary , nrow = 1000)
str(poblaciones_df)
poblaciones_df
clientes <- data.frame(matrix(ncol = 4, nrow = 1000 ),stringsAsFactors = FALSE)
clientes <- c('id', 'sexo', 'edad', 'barrios')
colnames(clientes) <- x
str(clientes)
clientes <- data.frame(matrix(ncol = 4, nrow = 1000 ),stringsAsFactors = FALSE)
clientes <- c('id', 'sexo', 'edad', 'barrios')
colnames(clientes) <- x
clientes <- data.frame(matrix(ncol = 4, nrow = 1000 ),stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad', 'barrios')
colnames(clientes) <- x
str(clientes)
View(clientes)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary , nrow = 1000)
colnames(poblaciones_df) <- employee
str(poblaciones_df)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary , nrow = 1000 ,stringsAsFactors = FALSE)
colnames(poblaciones_df) <- employee
str(poblaciones_df)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary , nrow = 1000 ,stringsAsFactors = FALSE)
colnames(poblaciones_df) <- salary
str(poblaciones_df)
clientes <- data.frame(matrix(ncol = 4, nrow = 1000 ),stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad', 'barrios')
colnames(clientes) <- x
str(clientes)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary , nrow = 1000 ,stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad', 'barrios')
colnames(poblaciones_df) <- x
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
poblaciones_df <- data.frame(employee,salary , nrow = 1000 ,stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad')
colnames(poblaciones_df) <- x
str(poblaciones_df)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
barrios<- c('Centro', 'Pocitos', 'Malvin','Punta Gorda')
poblaciones_df <- data.frame(employee,salary,barrios , nrow = 1000 ,stringsAsFactors = FALSE)
id <- c(1,2,3,4)
sexo <- c('M', 'M', 'M','F')
barrios<- c('Centro', 'Pocitos', 'Malvin','Punta Gorda')
poblaciones_df <- data.frame(employee,salary,barrios , nrow = 1000 ,stringsAsFactors = FALSE)
id <- c(1,2,3,4)
sexo <- c('M', 'M', 'M','F')
barrios<- c('Centro', 'Pocitos', 'Malvin','Punta Gorda')
poblaciones_df <- data.frame(employee,salary , nrow = 1000 ,stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad','barrios')
colnames(poblaciones_df) <- x
id <- c(1,2,3,4)
sexo <- c('M', 'M', 'M','F')
edad <- c('30', '63', '43','32')
barrios<- c('Centro', 'Pocitos', 'Malvin','Punta Gorda')
poblaciones_df <- data.frame(id,sexo,edad ,barrios, nrow = 1000 ,stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad','barrios')
colnames(poblaciones_df) <- x
str(poblaciones_df)
transaction_count <- 100000
transaction_count <- 100000
transaction_count
transaction_count <- 100000 #simple variable asignation
# ?
generate_dates<- function(N, inicio="2017-01-01", fin="2017-12-31") { # N is the transaction count variable (must be passed) ,inicio is the starting date defaulted as 2017-01-01, fin is the end date defaulted as 2017-12-31
inicio <- as.POSIXct(as.Date(inicio), format = "%Y-%m-%d") #Date time constructor function 'POSIXct' formating the input date(inicio) as year ,month, day
fin <- as.POSIXct(as.Date(fin), format = "%Y-%m-%d") #Date time constructor function 'POSIXct' formating the input date(fin) as year ,month, day
dt <- as.numeric(difftime(fin,inicio,unit="sec")) # difftime -> Time intervals creation, printing, and some arithmetic. Substraction fin-inicio giving the answer in seconds.
ev <- sort(runif(N, 0, dt)) #Sort -> (or order) a vector or factor (partially) into ascending or descending order.Runif -> Generates random compositions with a uniform distribution on the (rcomp) simplex.
rt <- inicio + ev
rt <- as.Date(rt,format = "%Y-%m-%d")
}
transaction_count <- 100000 #simple variable asignation
# ?
generate_dates<- function(N, inicio="2017-01-01", fin="2017-12-31") { # N is the transaction count variable (must be passed) ,inicio is the starting date defaulted as 2017-01-01, fin is the end date defaulted as 2017-12-31
inicio <- as.POSIXct(as.Date(inicio), format = "%Y-%m-%d") #Date time constructor function 'POSIXct' formating the input date(inicio) as year ,month, day
fin <- as.POSIXct(as.Date(fin), format = "%Y-%m-%d") #Date time constructor function 'POSIXct' formating the input date(fin) as year ,month, day. as date is to avoid coersion parsing the resulting data to date in this case.
dt <- as.numeric(difftime(fin,inicio,unit="sec")) # difftime -> Time intervals creation, printing, and some arithmetic. Substraction fin-inicio giving the answer in seconds.
ev <- sort(runif(N, 0, dt)) #Sort -> (or order) a vector or factor (partially) into ascending or descending order, defaulted to beong decresing order.Runif -> Generates random compositions with a uniform distribution on the (rcomp) simplex.minimun 0 max beign dt and N the number of datasets being simulated
rt <- inicio + ev
rt <- as.Date(rt,format = "%Y-%m-%d")
}
# ?
dates <- data.frame(
datetime = generate_dates(transaction_count)
)
rt
dates
View(dates)
id <- c(1,2,3,4)
sexo <- c('M', 'M', 'M','F')
edad <- c('30', '63', '43','32')
barrios<- c('Centro', 'Pocitos', 'Malvin','Punta Gorda')
clientes <- data.frame(id,sexo,edad ,barrios, nrow = 1000 ,stringsAsFactors = FALSE)
x <- c('id', 'sexo', 'edad','barrios')
colnames(clientes) <- x
str(clientes)
monto_max <- 100000
transacciones <- data.frame(
monto = sample(seq(1,monto_max,1), 1000),
tipo = sample(c("venta", "devolucion"),1000,1),
cliente_id = sample(clientes$id, 1000, replace = FALSE),
tiendas = sample(tiendas, 1000, replace = TRUE)
)
transacciones <- data.frame(
monto = sample(seq(1,monto_max,1), 1000),
tipo = sample(c("venta", "devolucion"),1000,1),
cliente_id = sample(clientes$id, 1000, replace = FALSE),
tiendas = sample(tiendas, 1000, replace = TRUE)
)
monto_max <- 100000
transacciones <- data.frame(
monto = sample(seq(1,monto_max,1), 1000),
tipo = sample(c("venta", "devolucion"),1000,1),
cliente_id = sample(clientes$id, 1000, replace = TRUE),
tiendas = sample(tiendas, 1000, replace = TRUE)
)
View(transacciones)
View(transacciones)
View(transacciones)
View(transacciones)
View(transacciones)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
df %>% separate(x, c(NA, "B"))
install.packages("tidyr")
install.packages("tidyr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
cuentas_df <- data.frame(
dia = c('lunes', 'martes', 'miercoles'),
debito = c(20000,25000,3000),
credito = c(100000,500, 11000),
ajuste = c(80000,24500,4000)
)
cuentas_df
cuentas_gather <- gather(cuentas_df, key = ' operaciones', value = 'cantidades', debito:ajuste)
cuentas_gather
cuentas_gather <- gather(cuentas_df, key = ' operaciones', value = 'cantidades')
poblaciones_df <- data.frame(
pais = c('Argentina ', 'Argentina ', 'Uruguay ', 'Uruguay ','Argentina ', 'Argentina ', 'Uruguay ', 'Uruguay '),
Anio = c(1980,1980,1980,1980,1981,1981,1981,1981),
tipo = c('total', 'urbana', 'total', 'urbana'),
poblacion = c(27000000,23000000,3000000,200000,27000100,23000030,3000001,200000)
)
poblaciones_df
poblacion_ordenado <- tidyr::spread(data = poblaciones_df, key = tipo, value = poblacion)
poblacion_ordenado
new_df <- data.frame(
monto = sample(seq(1,monto_max,1), 1000),
tipo = sample(c("venta", "devolucion"),1000,1),
cliente_id = sample(clientes$id, 1000, replace = TRUE),
tiendas = sample(tiendas, 1000, replace = TRUE)
)
new_df
poblacion_ordenado <- tidyr::spread(data = new_df, key = tipo, value = monto)
poblacion_ordenado <- tidyr::spread(data = new_df, key = tipo, value = tiendas)
poblacion_ordenado
poblaciones_df <- data.frame(
pais = c('Argentina ', 'Argentina ', 'Uruguay ', 'Uruguay ','Argentina ', 'Argentina ', 'Uruguay ', 'Uruguay '),
Anio = c(1980,1980,1980,1980,1981,1981,1981,1981),
tipo = c('total', 'urbana', 'total', 'urbana'),
poblacion = c(27000000,23000000,3000000,200000,27000100,23000030,3000001,200000)
)
poblacion_ordenado <- tidyr::spread(data = poblaciones_df, key = tipo, value = poblacion)
poblacion_ordenado
poblaciones_df
balance_df <- data.frame(
anio = c(2000, 2001, 2002,2003,2004),
roa = c('16009500/2202902', '16130290/1887926', '22689382/1437912', '25152363/2112528', '25107346/1899890'),
pasivo = c(4438562, 4361452, 4960117, 5981713, 659444)
)
balance_df
try(balance_separado <- balance_df %>%
separate_("roa", into =  c("activo", "resultado"),  sep  =  "/"))
balance_separado
try(new_df <- separate_(tipo, into =  c("venta", "devolucion"),  sep  =  "/"))
try(new_df <- separate_("tipo", into =  c("venta", "devolucion"),  sep  =  "/"))
try(new_df <- separate_("tipo", into =  c("venta", "devolucion")))
try(new_df <- separate("tipo", into =  c("venta", "devolucion")))
df %>% separate(tipo, c("A", "B"))
new_df %>% separate(tipo, c("A", "B"))
new_df %>% separate(tipo, c("venta", "devolucion"))
new_df %>% separate(monto, c("venta", "devolucion"))
new_df %>% separate(tipo, c("venta", "devolucion"))
new_df %>% separate(tipo, c("A", "B"))
new_df %>% separate(tipo, c("A", "B"), "venta")
new_df <- data.frame(
tipo = sample(c("venta", "devolucion"),1000,1)
)
new_df %>% separate(tipo, c("key", "value"),)
new_df <- data.frame(
monto = sample(seq(1,monto_max,1), 1000),
tipo = sample(c("venta", "devolucion"),1000,1),
cliente_id = sample(clientes$id, 1000, replace = TRUE),
tiendas = sample(tiendas, 1000, replace = TRUE)
)
new_df
spread(new_df, tipo, monto)
spread(new_df, tipo, cliente_id)
monto_max <- 100000
transacciones <- data.frame(
monto = sample(seq(1,monto_max,1), 1000),
tipo = sample(c("venta", "devolucion"),1000,1),
cliente_id = sample(clientes$id, 1000, replace = TRUE),
tiendas = sample(tiendas, 1000, replace = TRUE)
)
new_df = spread(transacciones, tipo, cliente_id)
new_df
new_df = spread(transacciones, tipo, cliente_id)
new_df[is.na(new_df)]=0
new_df
authors <- data.frame(
surname = c("Tukey", "Venables", "Tierney", "Ripley", "McNeil"),
nationality = c("US", "Australia", "US", "UK", "Australia"),
retired = c("yes", rep("no", 4)))
books <- data.frame(
name = c("Tukey", "Venables", "Tierney", "Ripley", "Ripley", "McNeil"),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis"),
other.author = c(NA, "Ripley", NA, NA, NA, NA))
merge(authors, books, by.x="surname", by.y="name")
merge(books, authors, by.x="name", by.y="surname")
authors
authors <- data.frame(
surname = c("Tukey", "Venables", "Tierney", "Ripley", "McNeil"),
nationality = c("US", "Australia", "US", "UK", "Australia"),
retired = c("yes", rep("no", 4)))
books <- data.frame(
name = c("Tukey", "Venables", "Tierney", "Ripley", "Ripley", "McNeil"),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis"),
other.author = c(NA, "Ripley", NA, NA, NA, NA))
merge(authors, books, by.x="surname", by.y="name")
clientes
transacciones
merge(clientes, transacciones)
mergedDf <- merge(clientes, transacciones)
mergedDf
mergedDf
mergedDf <- cbind(clientes, transacciones)
mergedDf
merge(clientes, transacciones)
dates
mergedDf
bind_cols(mergedDf, dates)
bind_cols(mergedDf, dates [1:1000])
bind_cols(mergedDf, dates(1:1000))
dates
transaction_count <- 100000 #simple variable asignation
# ?
generate_dates<- function(N, inicio="2017-01-01", fin="2017-12-31") { # N is the transaction count variable (must be passed) ,inicio is the starting date defaulted as 2017-01-01, fin is the end date defaulted as 2017-12-31
inicio <- as.POSIXct(as.Date(inicio), format = "%Y-%m-%d") #Date time constructor function 'POSIXct' formating the input date(inicio) as year ,month, day
fin <- as.POSIXct(as.Date(fin), format = "%Y-%m-%d") #Date time constructor function 'POSIXct' formating the input date(fin) as year ,month, day. as date is to avoid coersion parsing the resulting data to date in this case.
dt <- as.numeric(difftime(fin,inicio,unit="sec")) # difftime -> Time intervals creation, printing, and some arithmetic. Substraction fin-inicio giving the answer in seconds.
ev <- sort(runif(N, 0, dt)) #Sort -> (or order) a vector or factor (partially) into ascending or descending order, defaulted to beong decresing order.Runif -> Generates random compositions with a uniform distribution on the (rcomp) simplex.minimun 0 max beign dt and N the number of datasets being simulated.
rt <- inicio + ev #here we are adding the difference sorted
rt <- as.Date(rt,format = "%Y-%m-%d") #then again we convert the date in format year-mont-day and its the final returnable result
}
# ?
dates <- data.frame(   #Dataset creation with the result of generate_dates with 10k elements from 2017-01-01 to 2017-12-31
datetime = generate_dates(transaction_count)
)
dates
dates(1:1000)
bind_cols(mergedDf, dates)
dates
dates(datetime = 1:1000)
sample (c(1:10))
sample (dates(1:1000))
dates
sample (dates)
sample(dates, size=3)
sample(dates, size=3,replace =F)
sample (c(1:10), size=3, replace =F)
sample (dates, size=3, replace =F)
sample_n(dates, 10)
bind_cols(mergedDf, sample_n(dates, 1000))
bind_cols(mergedDf, sample_n(dates, 1000))
bind_cols(mergedDf, sample_n(dates, 4000))
bind_cols(mergedDf, sample_n(dates, 4000))
bind_cols(mergedDf, sample_n(dates, 1000))
